"""
Multi-Asset Enhanced Strategy - Vers√£o com Algoritmo de Sinais Melhorado
Estrat√©gia separada que usa an√°lise t√©cnica avan√ßada para identificar oportunidades
"""

import os
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from src.performance_tracker import PerformanceTracker
from src.strategy_logger import create_strategy_logger
from src.enhanced_signal_detector import EnhancedSignalDetector

class MultiAssetEnhancedStrategy:
    def __init__(self, auth_client, calculator, position_manager):
        """Inicializa estrat√©gia multi-asset com algoritmo de sinais melhorado"""
        self.logger = create_strategy_logger('PacificaBot.MultiAssetEnhanced', 'multi_asset_enhanced')
        
        self.auth = auth_client
        self.calculator = calculator
        self.position_mgr = position_manager
        
        # Configura√ß√µes espec√≠ficas do multi-asset
        self.symbols = self._parse_symbols()
        self.position_size_usd = float(os.getenv('POSITION_SIZE_USD', '20'))
        self.leverage = int(os.getenv('LEVERAGE', '10'))
        self.max_concurrent_trades = int(os.getenv('MAX_CONCURRENT_TRADES', '3'))
        self.allow_multiple_per_symbol = os.getenv('ALLOW_MULTIPLE_PER_SYMBOL', 'false').lower() == 'true'
        self.price_change_threshold = float(os.getenv('PRICE_CHANGE_THRESHOLD', '0.3'))
        
        # Configura√ß√µes de TP/SL
        self.auto_close_enabled = os.getenv('AUTO_CLOSE_ENABLED', 'true').lower() == 'true'
        self.use_api_tp_sl = os.getenv('USE_API_TP_SL', 'true').lower() == 'true'
        self.stop_loss_percent = float(os.getenv('STOP_LOSS_PERCENT', '1.5'))   # ‚úÖ Limite de perda menor
        self.take_profit_percent = float(os.getenv('TAKE_PROFIT_PERCENT', '2.0')) # ‚úÖ Meta de lucro maior
        self.trailing_stop_enabled = os.getenv('TRAILING_STOP_ENABLED', 'false').lower() == 'true'
        self.trailing_stop_percent = float(os.getenv('TRAILING_STOP_PERCENT', '0.5'))
        self.max_position_time_minutes = int(os.getenv('MAX_POSITION_TIME_MINUTES', '60'))
        
        # üÜï CONFIGURA√á√ïES ESPEC√çFICAS DO ALGORITMO MELHORADO
        self.enhanced_min_signal_quality = int(os.getenv('ENHANCED_MIN_SIGNAL_QUALITY', '60'))  # 0-100
        self.enhanced_min_confidence = int(os.getenv('ENHANCED_MIN_CONFIDENCE', '70'))  # 0-100
        self.enhanced_use_rsi_filter = os.getenv('ENHANCED_USE_RSI_FILTER', 'true').lower() == 'true'
        self.enhanced_max_volatility = float(os.getenv('ENHANCED_MAX_VOLATILITY', '5.0'))  # %
        self.enhanced_min_history = int(os.getenv('ENHANCED_MIN_HISTORY', '20'))  # per√≠odos
        
        # Estado interno
        self.price_history = {}  # {symbol: [prices]} - Hist√≥rico expandido
        self.lot_sizes = {}     # {symbol: lot_size}
        self.active_positions = {}  # {position_id: position_data}
        self.symbol_positions = {}  # {symbol: count}
        
        # üÜï DETECTOR DE SINAIS MELHORADO
        self.signal_detector = EnhancedSignalDetector(self.logger)
        self.signal_detector.min_signal_quality = self.enhanced_min_signal_quality
        
        # Estat√≠sticas da estrat√©gia
        self.signals_detected = 0
        self.signals_executed = 0
        self.signals_rejected_quality = 0
        self.signals_rejected_limits = 0
        
        # TP/SL tracking
        self.position_max_profit = {}
        self.position_trailing_stops = {}
        
        # Performance tracking
        self.performance_tracker = PerformanceTracker(
            symbols=self.symbols if len(self.symbols) <= 5 else self.symbols[:5]
        )
        
        # üîß CACHE PARA SYMBOL_INFO (precisa existir antes de _initialize_symbols)
        self.symbol_info_cache = {}

        # üÜï INICIALIZAR ESTRUTURAS PARA CADA S√çMBOLO COM VALIDA√á√ÉO
        self._initialize_symbols()
        
        self.logger.strategy_info(f"Enhanced Multi-Asset inicializada com {len(self.symbols)} s√≠mbolos")
        self.logger.info(f"üß† Algoritmo melhorado: Quality ‚â• {self.enhanced_min_signal_quality}, Confidence ‚â• {self.enhanced_min_confidence}")
        
    def get_symbol_info_cached(self, symbol: str):
        """Obt√©m symbol_info com cache para evitar requisi√ß√µes duplicadas"""
        if symbol not in self.symbol_info_cache:
            symbol_info = self.auth.get_symbol_info(symbol)
            if symbol_info:
                self.symbol_info_cache[symbol] = symbol_info
            else:
                return None
        return self.symbol_info_cache[symbol]
    
    def _initialize_symbols(self):
        """üÜï INICIALIZAR estruturas para cada s√≠mbolo com valida√ß√£o detalhada"""
        for symbol in self.symbols:
            self.price_history[symbol] = []
            self.lot_sizes[symbol] = self.get_lot_size(symbol)  # Chama valida√ß√£o detalhada
            self.symbol_positions[symbol] = 0    

    def _parse_symbols(self) -> List[str]:
        """Parse dos s√≠mbolos do .env"""
        symbols_str = os.getenv('SYMBOLS', 'BTC,ETH,SOL')
        
        self.logger.info(f"üìã SYMBOLS configurado: {symbols_str}")
        
        if symbols_str.upper() == 'AUTO':
            self.logger.info("üîç Modo AUTO detectado - buscando s√≠mbolos da API...")
            result = self._get_all_available_symbols()
            self.logger.info(f"‚úÖ S√≠mbolos retornados pelo AUTO: {result}")
            return result
        else:
            # ‚úÖ CR√çTICO: Adicionar .upper() aqui!
            symbols = [s.strip().upper() for s in symbols_str.split(',')]
            self.logger.info(f"‚úÖ S√≠mbolos manuais configurados: {symbols}")
            return symbols
    
    def _get_all_available_symbols(self) -> List[str]:
        """Busca todos os s√≠mbolos dispon√≠veis com blacklist configur√°vel"""
        try:
            prices_data = self.auth.get_prices()
            
            # Validar resposta
            if not prices_data:
                self.logger.warning("‚ö†Ô∏è API n√£o retornou dados de pre√ßos")
                return ['BTC', 'ETH', 'SOL']
            
            # Extrair dados (suporta diferentes estruturas)
            if isinstance(prices_data, dict):
                data_list = prices_data.get('data', [])
            elif isinstance(prices_data, list):
                data_list = prices_data
            else:
                self.logger.error(f"‚ùå Formato inesperado da API: {type(prices_data)}")
                return ['BTC', 'ETH', 'SOL']
            
            if not data_list:
                self.logger.warning("‚ö†Ô∏è Lista de dados vazia na resposta da API")
                return ['BTC', 'ETH', 'SOL']
            
            # Extrair todos os s√≠mbolos
            all_symbols = []
            for item in data_list:
                symbol = item.get('symbol')
                if symbol:
                    all_symbols.append(symbol)
            
            if not all_symbols:
                self.logger.warning("‚ö†Ô∏è Nenhum s√≠mbolo encontrado nos dados")
                return ['BTC', 'ETH', 'SOL']
            
            self.logger.info(f"‚úÖ Total de s√≠mbolos na exchange: {len(all_symbols)}")
            self.logger.info(f"üìã Todos os s√≠mbolos: {all_symbols}")
            
            # üÜï LER BLACKLIST DO .ENV
            use_blacklist = os.getenv('SYMBOLS_USE_BLACKLIST', 'true').lower() == 'true'
            blacklist_str = os.getenv('SYMBOLS_BLACKLIST', 'PUMP,kPEPE,FARTCOIN')
            max_symbols = int(os.getenv('SYMBOLS_MAX_COUNT', '0'))
            
            # Aplicar blacklist se configurado
            if use_blacklist and blacklist_str:
                blacklist = [s.strip().upper() for s in blacklist_str.split(',')]
                filtered_symbols = [s for s in all_symbols if s not in blacklist]
                
                removed_count = len(all_symbols) - len(filtered_symbols)
                if removed_count > 0:
                    removed_list = [s for s in all_symbols if s in blacklist]
                    self.logger.info(f"üö´ Blacklist removeu {removed_count} s√≠mbolos: {removed_list}")
                else:
                    self.logger.info("‚ÑπÔ∏è Nenhum s√≠mbolo na blacklist foi encontrado")
                
                symbols = filtered_symbols
            else:
                symbols = all_symbols
                self.logger.info("‚ÑπÔ∏è Blacklist desativada - usando todos os s√≠mbolos")
            
            # Aplicar limite se configurado
            if max_symbols > 0 and len(symbols) > max_symbols:
                self.logger.info(f"üìä Limitando de {len(symbols)} para {max_symbols} s√≠mbolos")
                symbols = symbols[:max_symbols]
            
            self.logger.info(f"üéØ S√≠mbolos finais selecionados: {len(symbols)}")
            self.logger.info(f"üìã Lista final: {symbols}")
            
            return symbols
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao buscar s√≠mbolos: {e}")
            import traceback
            self.logger.debug(traceback.format_exc())
        
        # Fallback final
        self.logger.warning("‚ö†Ô∏è Usando fallback padr√£o: BTC, ETH, SOL")
        return ['BTC', 'ETH', 'SOL']
    
    def get_lot_size(self, symbol: str) -> float:
        """Obt√©m lot size para o s√≠mbolo com valida√ß√£o detalhada"""
        try:
            # Usar info com cache para evitar requisi√ß√µes duplicadas e logs repetidos
            info = self.get_symbol_info_cached(symbol)
            if info and 'lot_size' in info:
                lot_size = float(info['lot_size'])
                tick_size = float(info.get('tick_size', 0.01))
                
                # N√£o logar novamente aqui para evitar duplicidade; o log ocorre quando o cache √© preenchido
                return lot_size
        except Exception as e:
            self.logger.warning(f"Erro ao obter lot_size para {symbol}: {e}")
        
        # Fallback baseado no s√≠mbolo
        lot_sizes = {
            'BTC': 0.00001, 'ETH': 0.0001, 'SOL': 0.01, 'AVAX': 0.01,
            'DOGE': 1, 'ADA': 1, 'MATIC': 0.1, 'DOT': 0.1,
            'LINK': 0.1, 'UNI': 0.1, 'AAVE': 0.01, 'ATOM': 0.01
        }
        fallback = lot_sizes.get(symbol, 0.001)
        self.logger.warning(f"‚ö†Ô∏è {symbol}: usando fallback lot_size={fallback}")
        return fallback
    
    def initialize_grid(self, current_price: float) -> bool:
        """M√©todo compat√≠vel com o bot principal - inicializa estrat√©gia"""
        self.logger.strategy_info("Inicializando Enhanced Multi-Asset Strategy...")
        
        try:
            # Inicializar hist√≥rico de pre√ßos expandido
            prices = self.auth.get_prices()
            if prices and 'data' in prices:
                for item in prices['data']:
                    symbol = item.get('symbol')
                    price = item.get('mark') or item.get('mid')
                    if symbol in self.symbols and price:
                        # Inicializar com pre√ßo atual (hist√≥rico ser√° constru√≠do)
                        self.price_history[symbol] = [float(price)]
                        
            self.logger.info(f"‚úÖ Pre√ßos iniciais carregados para {len(self.price_history)} s√≠mbolos")
            
            # Log das configura√ß√µes melhoradas
            status = self.signal_detector.get_algorithm_status()
            self.logger.info(f"üß† Algoritmo: {status['version']} com {len(status['indicators'])} indicadores")
            self.logger.info(f"üéØ Pesos: Momentum={status['weights']['momentum']}% | Trend={status['weights']['trend']}% | RSI={status['weights']['rsi']}%")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao inicializar Enhanced Strategy: {e}")
            return False
    
    def check_filled_orders(self, current_price: float):
        """Verifica ordens executadas e analisa sinais - m√©todo compat√≠vel"""
        try:
            # 1. Verificar ordens preenchidas (mesmo processo da vers√£o original)
            self._check_filled_orders_internal()
            
            # 2. Atualizar hist√≥rico de pre√ßos
            self._update_price_history()
            
            # 3. üÜï AN√ÅLISE DE SINAIS MELHORADA
            self._analyze_market_signals()
            
            # 4. Verificar TP/SL manual se habilitado
            if not self.use_api_tp_sl:
                self._check_all_tp_sl()
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro no check_filled_orders: {e}")
    
    def _check_filled_orders_internal(self):
        """L√≥gica interna de verifica√ß√£o de ordens preenchidas"""
        # Implementar verifica√ß√£o de ordens preenchidas
        # (mesmo processo da estrat√©gia original)
        pass
    
    def _update_price_history(self):
        """Atualiza hist√≥rico de pre√ßos para an√°lise t√©cnica"""
        try:
            prices_data = self.auth.get_prices()
            if not prices_data or not prices_data.get('success'):
                return
                
            for item in prices_data.get('data', []):
                symbol = item.get('symbol')
                price = item.get('mark') or item.get('mid')
                
                if symbol in self.symbols and price:
                    current_price = float(price)
                    
                    if symbol not in self.price_history:
                        self.price_history[symbol] = []
                    
                    # Adicionar novo pre√ßo
                    self.price_history[symbol].append(current_price)
                    
                    # üîß NOVA ADI√á√ÉO: Limitar tamanho do hist√≥rico para evitar memory leak
                    MAX_HISTORY_SIZE = 100  # Manter apenas 100 √∫ltimos pre√ßos
                    if len(self.price_history[symbol]) > MAX_HISTORY_SIZE:
                        # Remove 50% quando atinge limite (otimiza√ß√£o de performance)
                        self.price_history[symbol] = self.price_history[symbol][-50:]
                        self.logger.debug(f"üßπ Hist√≥rico {symbol} limitado a 50 entradas para evitar memory leak")
                        
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao atualizar hist√≥rico de pre√ßos: {e}")
    
    def _analyze_market_signals(self):
        """üÜï AN√ÅLISE DE SINAIS COM ALGORITMO MELHORADO + HIST√ìRICO DA API"""
        
        self.logger.info(f"üîç Enhanced: Analisando sinais em {len(self.symbols)} s√≠mbolos...")
    
        signals_found = 0
        for i, symbol in enumerate(self.symbols):
            if symbol not in self.price_history:
                continue
                
            try:
                # üîß DELAY ENTRE S√çMBOLOS PARA REDUZIR CARGA NA API
                if i > 0:  # N√£o aplicar delay no primeiro s√≠mbolo
                    delay = 0.6  # 600ms entre s√≠mbolos
                    time.sleep(delay)
                
                current_price = self.price_history[symbol][-1]
                price_history = self.price_history[symbol]
                
                # üî• VERIFICAR SE PRECISA DE HIST√ìRICO DA API
                if len(price_history) < self.enhanced_min_history:
                    self.logger.debug(f"üîÑ {symbol}: Hist√≥rico insuficiente ({len(price_history)} < {self.enhanced_min_history}), buscando na API...")
                    
                    # Buscar hist√≥rico da API
                    api_history = self.auth.get_historical_data(
                        symbol=symbol, 
                        interval="1m", 
                        periods=self.enhanced_min_history + 5  # Pegar alguns extras
                    )
                    
                    if api_history and len(api_history) >= self.enhanced_min_history:
                        self.logger.info(f"‚úÖ {symbol}: Hist√≥rico obtido da API - {len(api_history)} pre√ßos")
                        # Combinar hist√≥rico da API + cache atual
                        combined_history = api_history[:-1] + price_history  # Remove √∫ltimo da API para evitar duplicata
                        price_history = combined_history
                    else:
                        self.logger.warning(f"‚ö†Ô∏è {symbol}: Hist√≥rico insuficiente na API tamb√©m, pulando an√°lise")
                        continue
                
                # üß† USAR DETECTOR MELHORADO
                signal = self.signal_detector.detect_signal(
                    symbol=symbol,
                    price_history=price_history,
                    current_price=current_price,
                    price_change_threshold=self.price_change_threshold
                )
                
                if signal:
                    signals_found += 1
                    self.signals_detected += 1
                    
                    # üéØ LOG MELHORADO COM INFORMA√á√ïES DO SINAL
                    quality_score = signal.get('quality_score', 0)
                    confidence = signal.get('confidence', 0)
                    side = signal.get('side', 'N/A')
                    
                    self.logger.info(f"‚ö° {symbol}: Sinal {side} detectado - Qualidade: {quality_score:.1f}/100, Confian√ßa: {confidence:.1f}/100")
                    
                    # Log dos indicadores
                    momentum = signal.get('momentum', 0)
                    trend = signal.get('trend', 'N/A')
                    rsi = signal.get('rsi', 0)
                    volatility = signal.get('volatility', 0)
                    
                    self.logger.debug(f"   üìä Indicadores: Momentum={momentum:.2f}%, Trend={trend}, RSI={rsi:.1f}, Vol={volatility:.2f}%")
                    
                    # Verificar confian√ßa m√≠nima
                    if confidence >= self.enhanced_min_confidence:
                        
                        # Verificar se pode executar
                        if self._can_execute_enhanced_signal(symbol, signal):
                            self.logger.info(f"üöÄ {symbol}: Executando sinal Enhanced...")
                            self._execute_enhanced_signal(symbol, signal)
                            self.signals_executed += 1
                        else:
                            self.signals_rejected_limits += 1
                            self.logger.debug(f"üö´ {symbol}: Sinal rejeitado - Limites de execu√ß√£o")
                    else:
                        self.signals_rejected_quality += 1
                        self.logger.debug(f"üìä {symbol}: Sinal rejeitado - Confian√ßa {confidence:.1f} < {self.enhanced_min_confidence}")
                        
            except Exception as e:
                self.logger.error(f"‚ùå Erro ao analisar {symbol}: {e}")
                import traceback
                self.logger.debug(f"üìã Stack trace: {traceback.format_exc()}")
        
        # üìä LOG FINAL DA AN√ÅLISE COM ESTAT√çSTICAS
        if signals_found > 0:
            execution_rate = (self.signals_executed / self.signals_detected * 100) if self.signals_detected > 0 else 0
            self.logger.info(f"üìä Enhanced: {signals_found} sinais encontrados | Executados: {self.signals_executed} | Taxa: {execution_rate:.1f}%")
        else:
            self.logger.info(f"üìä Enhanced: Nenhum sinal encontrado nos {len(self.symbols)} s√≠mbolos analisados")
    
    def _can_execute_enhanced_signal(self, symbol: str, signal: Dict) -> bool:
        """Verifica se pode executar sinal com valida√ß√µes adicionais"""
        
        # 1. Verifica√ß√µes b√°sicas (mesmo da vers√£o original)
        if len(self.active_positions) >= self.max_concurrent_trades:
            self.logger.info(f"üìä {symbol}: Rejeitado - limite de trades ({len(self.active_positions)} >= {self.max_concurrent_trades})")
            return False
        
        if not self.allow_multiple_per_symbol:
            if self.symbol_positions.get(symbol, 0) > 0:
                self.logger.info(f"üìä {symbol}: Rejeitado - j√° tem posi√ß√£o ativa")
                return False
        
        # 2. Verificar margem
        margin_needed = self.position_size_usd / self.leverage
        can_place, msg = self.position_mgr.can_place_order(self.position_size_usd)
        
        if not can_place:
            self.logger.info(f"üìä {symbol}: Rejeitado - margem insuficiente ({msg})")
            return False
        
        # 3. üÜï FILTROS ADICIONAIS PARA ALGORITMO MELHORADO
        
        # Filtro de volatilidade extrema
        if signal['volatility'] > self.enhanced_max_volatility:
            self.logger.info(f"üìä {symbol}: Rejeitado - volatilidade alta ({signal['volatility']:.2f}% > {self.enhanced_max_volatility}%)")
            return False
        
        # Filtro RSI se habilitado
        if self.enhanced_use_rsi_filter:
            rsi = signal['rsi']
            side = signal['side']
            
            # Evitar comprar em overbought ou vender em oversold
            if (side == 'LONG' and rsi > 80) or (side == 'SHORT' and rsi < 20):
                self.logger.info(f"üìä {symbol}: Rejeitado - RSI extremo ({rsi:.1f}) para {side}")
                return False
        
        # üéØ LOG DE APROVA√á√ÉO
        self.logger.info(f"üìä {symbol}: Sinal APROVADO - todas valida√ß√µes passaram")
        return True
    
    def _execute_enhanced_signal(self, symbol: str, signal: Dict):
        """EXECUTA SINAL COM CORRE√á√ïES DE TIPO E CACHE"""
        
        try:
            side = signal['side']
            current_price = float(self.price_history[symbol][-1])
            quality_score = float(signal['quality_score'])
            confidence = float(signal['confidence'])
            
            # Log melhorado
            self.logger.enhanced_signal(symbol, quality_score, confidence/100, side)
            
            # Detalhes t√©cnicos
            indicators = {
                'Momentum': f"{signal['momentum']:.2f}%",
                'Trend': signal['trend'],
                'RSI': f"{signal['rsi']:.1f}",
                'Volatility': f"{signal['volatility']:.2f}%"
            }
            self.logger.enhanced_analysis(symbol, indicators)
            
            # üîß USAR CACHE PARA SYMBOL_INFO
            symbol_info = self.get_symbol_info_cached(symbol)
            if not symbol_info:
                self.logger.error(f"‚ùå N√£o foi poss√≠vel obter informa√ß√µes do s√≠mbolo {symbol}")
                return
                
            tick_size = float(symbol_info.get('tick_size', 0.01))
            
            # Calcular quantidade
            base_quantity = self.position_size_usd / current_price
            lot_size = self.get_lot_size(symbol)
            
            confidence_multiplier = min(1.2, confidence / 100 + 0.2)
            adjusted_quantity = base_quantity * confidence_multiplier
            quantity = max(lot_size, round(adjusted_quantity / lot_size) * lot_size)
            
            self.logger.info(f"   üí∞ Quantity: {quantity} (ajustada por confidence: {confidence_multiplier:.2f}x)")
            
            # Determinar lado da ordem
            order_side = 'bid' if side == 'LONG' else 'ask'
            
            # Arredondar pre√ßo principal
            current_price_rounded = self.auth._round_to_tick_size(current_price, tick_size)
            
            # Preparar TP/SL com arredondamento
            take_profit_config = None
            stop_loss_config = None
            
            if self.auto_close_enabled and self.use_api_tp_sl:
                if side == 'LONG':
                    tp_stop_price = current_price * (1 + self.take_profit_percent / 100)
                    tp_limit_price = tp_stop_price * 0.999
                    sl_stop_price = current_price * (1 - self.stop_loss_percent / 100)
                    sl_limit_price = sl_stop_price * 1.001
                else:  # SHORT
                    tp_stop_price = current_price * (1 - self.take_profit_percent / 100)
                    tp_limit_price = tp_stop_price * 1.001
                    sl_stop_price = current_price * (1 + self.stop_loss_percent / 100)
                    sl_limit_price = sl_stop_price * 0.999
                
                # Arredondar todos os pre√ßos
                tp_stop_price_rounded = self.auth._round_to_tick_size(tp_stop_price, tick_size)
                tp_limit_price_rounded = self.auth._round_to_tick_size(tp_limit_price, tick_size)
                sl_stop_price_rounded = self.auth._round_to_tick_size(sl_stop_price, tick_size)
                sl_limit_price_rounded = self.auth._round_to_tick_size(sl_limit_price, tick_size)
                
                take_profit_config = {
                    "stop_price": tp_stop_price_rounded,
                    "limit_price": tp_limit_price_rounded
                }
                
                stop_loss_config = {
                    "stop_price": sl_stop_price_rounded,
                    "limit_price": sl_limit_price_rounded
                }
                
                self.logger.info(f"üéØ TP/SL: TP@${tp_stop_price_rounded}, SL@${sl_stop_price_rounded}")
            
            # Executar ordem
            result = self.auth.create_order(
                symbol=symbol,
                side=order_side,
                amount=str(quantity),
                price=str(current_price_rounded),
                order_type='GTC',
                take_profit=take_profit_config,
                stop_loss=stop_loss_config
            )
            
            if result and result.get('success'):
                order_data = result.get('data', {})
                order_id = order_data.get('order_id')
                position_id = f"{symbol}_{int(time.time())}"
                
                # Salvar posi√ß√£o
                position_info = {
                    'symbol': symbol,
                    'side': order_side,  # 'bid' ou 'ask' conforme API
                    'quantity': quantity,
                    'price': current_price_rounded,
                    'order_id': order_id,
                    'timestamp': datetime.now(),
                    'signal_quality': quality_score,
                    'signal_confidence': confidence,
                    'signal_momentum': signal['momentum'],
                    'signal_trend': signal['trend'],
                    'signal_rsi': signal['rsi'],
                    'signal_volatility': signal['volatility']
                }
                
                # ‚úÖ SALVAR IDs DE TP/SL SE CRIADOS JUNTO COM A ORDEM
                if 'take_profit_order_id' in order_data:
                    position_info['take_profit_order_id'] = order_data['take_profit_order_id']
                    self.logger.info(f"üéØ TP ID salvo: {order_data['take_profit_order_id']}")
                    
                if 'stop_loss_order_id' in order_data:
                    position_info['stop_loss_order_id'] = order_data['stop_loss_order_id']
                    self.logger.info(f"üõ°Ô∏è SL ID salvo: {order_data['stop_loss_order_id']}")
                
                self.active_positions[position_id] = position_info
                
                self.symbol_positions[symbol] = self.symbol_positions.get(symbol, 0) + 1
                
                self.logger.strategy_info(f"‚úÖ Posi√ß√£o Enhanced aberta: {symbol} {side} {quantity} @ ${current_price_rounded:.4f}")
                
            else:
                self.logger.error(f"‚ùå Falha ao executar sinal Enhanced: {result}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao executar sinal Enhanced: {e}")
            import traceback
            self.logger.debug(f"Stack trace: {traceback.format_exc()}")

    def _check_all_tp_sl(self):
        """Verificar TP/SL de todas as posi√ß√µes ativas (Enhanced)"""
        if self.use_api_tp_sl:
            # Verificar se posi√ß√µes t√™m TP/SL via API
            self._verify_api_tp_sl()
        else:
            # Monitoramento manual de TP/SL
            self._check_manual_tp_sl()
    
    def _verify_api_tp_sl(self):
        """Verificar se todas as posi√ß√µes t√™m TP/SL via API (Enhanced)"""
        if not self.active_positions:
            return
        
        missing_tp_sl = []
        
        for position_id, position in self.active_positions.items():
            has_tp = 'take_profit_order_id' in position and position['take_profit_order_id']
            has_sl = 'stop_loss_order_id' in position and position['stop_loss_order_id']
            
            if not has_tp or not has_sl:
                missing_tp_sl.append({
                    'position_id': position_id,
                    'symbol': position['symbol'],
                    'side': position['side'],
                    'price': position['price'],
                    'quantity': position['quantity'],
                    'has_tp': has_tp,
                    'has_sl': has_sl
                })
        
        if missing_tp_sl:
            self.logger.warning(f"üß† Enhanced: {len(missing_tp_sl)} posi√ß√µes sem TP/SL completo")
            for pos in missing_tp_sl:
                self.logger.info(f"üîß Enhanced: Adicionando TP/SL para {pos['symbol']} - TP:{pos['has_tp']} SL:{pos['has_sl']}")
                self._add_missing_tp_sl(pos)
    
    def _add_missing_tp_sl(self, position_data):
        """Adicionar TP/SL em posi√ß√£o existente via API (Enhanced)"""
        try:
            symbol = position_data['symbol']
            side = position_data['side']
            entry_price = position_data['price']
            
            # üîß CORRE√á√ÉO CR√çTICA: Usar pre√ßo ATUAL, n√£o pre√ßo de entrada
            current_price = self._get_current_price(symbol)
            if not current_price:
                self.logger.error(f"‚ùå Enhanced: N√£o foi poss√≠vel obter pre√ßo atual para {symbol}")
                return False
            
            # Log da corre√ß√£o de pre√ßo
            price_change_percent = ((current_price - entry_price) / entry_price) * 100
            self.logger.info(f"üí∞ Enhanced: {symbol} - Entry: ${entry_price:.6f}, Atual: ${current_price:.6f} ({price_change_percent:+.2f}%)")
            
            # Calcular pre√ßos de TP/SL baseado no pre√ßo ATUAL
            if side == 'bid':  # Long position (comprando)
                tp_stop_price = current_price * (1 + self.take_profit_percent / 100)
                tp_limit_price = tp_stop_price * 0.999
                sl_stop_price = current_price * (1 - self.stop_loss_percent / 100)
                sl_limit_price = sl_stop_price * 1.001
            else:  # Short position (vendendo) - side == 'ask'
                tp_stop_price = current_price * (1 - self.take_profit_percent / 100)
                tp_limit_price = tp_stop_price * 1.001
                sl_stop_price = current_price * (1 + self.stop_loss_percent / 100)
                sl_limit_price = sl_stop_price * 0.999
            
            # Arredondar pre√ßos com precis√£o Enhanced
            tp_stop_price = round(tp_stop_price, 6)
            tp_limit_price = round(tp_limit_price, 6)
            sl_stop_price = round(sl_stop_price, 6)
            sl_limit_price = round(sl_limit_price, 6)
            
            # Chamar API para adicionar TP/SL
            result = self.auth.create_position_tp_sl(
                symbol=symbol,
                side=side,
                take_profit_stop=tp_stop_price,
                take_profit_limit=tp_limit_price,
                stop_loss_stop=sl_stop_price,
                stop_loss_limit=sl_limit_price
            )
            
            if result and result.get('success'):
                self.logger.info(f"‚úÖ Enhanced: TP/SL adicionado para {symbol}: TP@{tp_stop_price} SL@{sl_stop_price}")
                # Atualizar posi√ß√£o local
                position_id = position_data['position_id']
                if position_id in self.active_positions:
                    self.active_positions[position_id].update({
                        'take_profit_order_id': result.get('take_profit_order_id'),
                        'stop_loss_order_id': result.get('stop_loss_order_id')
                    })
            else:
                self.logger.error(f"‚ùå Enhanced: Falha ao adicionar TP/SL para {symbol}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Enhanced: Erro ao adicionar TP/SL: {e}")
    
    def _check_manual_tp_sl(self):
        """Monitoramento manual de TP/SL Enhanced (quando USE_API_TP_SL=false)"""
        if not self.active_positions:
            return
        
        positions_to_close = []
        
        for position_id, position in self.active_positions.items():
            try:
                symbol = position['symbol']
                entry_price = position['price']
                side = position['side']
                quantity = position['quantity']
                
                # Obter pre√ßo atual
                current_price = self._get_current_price(symbol)
                if not current_price:
                    continue
                
                # Calcular PNL
                if side == 'bid':  # Long position (compramos)
                    pnl_percent = ((current_price - entry_price) / entry_price) * 100
                else:  # Short position (vendemos) - side == 'ask'
                    pnl_percent = ((entry_price - current_price) / entry_price) * 100
                
                # Enhanced: Verificar condi√ß√µes com l√≥gica melhorada
                should_close = False
                close_reason = ""
                
                # Stop Loss
                if pnl_percent <= -self.stop_loss_percent:
                    should_close = True
                    close_reason = f"STOP LOSS: {pnl_percent:.2f}%"
                
                # Take Profit
                elif pnl_percent >= self.take_profit_percent:
                    should_close = True
                    close_reason = f"TAKE PROFIT: {pnl_percent:.2f}%"
                
                # Enhanced: Trailing Stop (se habilitado)
                elif self.trailing_stop_enabled:
                    trailing_result = self._check_trailing_stop(position_id, position, current_price, pnl_percent)
                    if trailing_result:
                        should_close = True
                        close_reason = trailing_result
                
                if should_close:
                    positions_to_close.append({
                        'position_id': position_id,
                        'symbol': symbol,
                        'side': side,
                        'quantity': quantity,
                        'current_price': current_price,
                        'reason': close_reason
                    })
                    
            except Exception as e:
                self.logger.error(f"‚ùå Enhanced: Erro ao verificar TP/SL manual para {position_id}: {e}")
        
        # Fechar posi√ß√µes que atingiram TP/SL
        for pos in positions_to_close:
            self._close_position_manual(pos)
    
    def _check_trailing_stop(self, position_id: str, position: dict, current_price: float, pnl_percent: float) -> str:
        """Verificar trailing stop Enhanced"""
        try:
            # Inicializar tracking se n√£o existir
            if not hasattr(self, 'position_max_profit'):
                self.position_max_profit = {}
            if not hasattr(self, 'position_trailing_stops'):
                self.position_trailing_stops = {}
            
            # Atualizar m√°ximo lucro visto
            if position_id not in self.position_max_profit:
                self.position_max_profit[position_id] = pnl_percent
            else:
                self.position_max_profit[position_id] = max(self.position_max_profit[position_id], pnl_percent)
            
            max_profit = self.position_max_profit[position_id]
            
            # Se lucro atual est√° trailing_stop_percent abaixo do m√°ximo
            if max_profit > 0 and (max_profit - pnl_percent) >= self.trailing_stop_percent:
                return f"TRAILING STOP: Max:{max_profit:.2f}% Current:{pnl_percent:.2f}%"
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no trailing stop: {e}")
            return None
    
    def _close_position_manual(self, position_data):
        """Fechar posi√ß√£o manualmente por TP/SL (Enhanced)"""
        try:
            symbol = position_data['symbol']
            side = position_data['side']
            quantity = position_data['quantity']
            current_price = position_data['current_price']
            reason = position_data['reason']
            
            # Determinar lado da ordem de fechamento
            close_side = 'ask' if side == 'bid' else 'bid'
            
            self.logger.info(f"üß† Enhanced: Fechando posi√ß√£o {symbol} - {reason}")
            
            # Criar ordem de fechamento
            result = self.auth.create_order(
                symbol=symbol,
                side=close_side,
                amount=str(quantity),
                price=str(current_price),
                order_type="GTC",
                reduce_only=True
            )
            
            if result:
                self.logger.info(f"‚úÖ Enhanced: Ordem de fechamento criada para {symbol}")
                # Remover da lista de posi√ß√µes ativas
                position_id = position_data['position_id']
                if position_id in self.active_positions:
                    del self.active_positions[position_id]
                
                # Limpar tracking de trailing stop
                if hasattr(self, 'position_max_profit') and position_id in self.position_max_profit:
                    del self.position_max_profit[position_id]
                if hasattr(self, 'position_trailing_stops') and position_id in self.position_trailing_stops:
                    del self.position_trailing_stops[position_id]
            else:
                self.logger.error(f"‚ùå Enhanced: Falha ao criar ordem de fechamento para {symbol}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Enhanced: Erro ao fechar posi√ß√£o manual: {e}")
    
    def _get_current_price(self, symbol: str) -> float:
        """Obter pre√ßo atual de um s√≠mbolo (Enhanced)"""
        try:
            # Tentar usar hist√≥rico primeiro (mais eficiente)
            if hasattr(self, 'price_history') and symbol in self.price_history:
                if self.price_history[symbol]:
                    return float(self.price_history[symbol][-1])
            
            # Fallback para API
            prices_data = self.auth.get_prices()
            if prices_data and prices_data.get('success'):
                for item in prices_data.get('data', []):
                    if item.get('symbol') == symbol:
                        return float(item.get('mark') or item.get('mid') or 0)
            return 0.0
        except Exception as e:
            self.logger.error(f"‚ùå Enhanced: Erro ao obter pre√ßo de {symbol}: {e}")
            return 0.0
    
    def check_and_rebalance(self, current_price: float):
        """üÜï M√âTODO ESSENCIAL - Rebalancear estrat√©gia Enhanced (compat√≠vel com bot principal)"""
        self.logger.debug(f"üß† Enhanced: Iniciando check_and_rebalance - {len(self.symbols)} s√≠mbolos para an√°lise")
        try:
            # 1. Atualizar hist√≥rico de pre√ßos de todos os s√≠mbolos
            self._update_price_history()
            self.logger.debug(f"üìà Enhanced: Hist√≥rico atualizado para {len(self.price_history)} s√≠mbolos")
            
            # 2. Analisar sinais de mercado com algoritmo melhorado
            self._analyze_market_signals()
            
            # 3. üÜï Verifica√ß√£o peri√≥dica de TP/SL (Enhanced - a cada 2 ciclos)
            if not hasattr(self, '_tp_sl_check_counter'):
                self._tp_sl_check_counter = 0
            self._tp_sl_check_counter += 1
            
            if self._tp_sl_check_counter >= 2:  # Enhanced: mais frequente
                self.logger.debug("üîç Enhanced: Verifica√ß√£o peri√≥dica de TP/SL...")
                self._check_all_tp_sl()
                self._tp_sl_check_counter = 0
            
            # 4. Log peri√≥dico de performance
            if hasattr(self, 'signals_detected') and self.signals_detected > 0:
                execution_rate = (self.signals_executed / self.signals_detected) * 100
                self.logger.debug(f"üìä Enhanced: {self.signals_executed}/{self.signals_detected} sinais executados ({execution_rate:.1f}%)")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro no rebalanceamento Enhanced: {e}")
    
    def get_grid_status(self) -> Dict:
        """Retornar status compat√≠vel com o bot principal"""
        return {
            'active': len(self.active_positions) > 0,
            'center_price': 0,
            'active_orders': len(self.active_positions)
        }
    
    def get_enhanced_statistics(self) -> Dict:
        """üÜï ESTAT√çSTICAS ESPEC√çFICAS DA VERS√ÉO MELHORADA"""
        
        total_signals = self.signals_detected
        success_rate = (self.signals_executed / total_signals * 100) if total_signals > 0 else 0
        
        return {
            'algorithm_version': 'enhanced_v2.0',
            'signals_detected': self.signals_detected,
            'signals_executed': self.signals_executed,
            'signals_rejected_quality': self.signals_rejected_quality,
            'signals_rejected_limits': self.signals_rejected_limits,
            'execution_rate': f"{success_rate:.1f}%",
            'active_positions': len(self.active_positions),
            'symbols_monitored': len(self.price_history),
            'min_signal_quality': self.enhanced_min_signal_quality,
            'min_confidence': self.enhanced_min_confidence,
            'history_length': {symbol: len(prices) for symbol, prices in self.price_history.items()}
        }
    
    def get_performance_metrics(self) -> Dict:
        """Compatibilidade com grid_bot.py - m√©tricas b√°sicas de performance"""
        
        # Usar performance_tracker se dispon√≠vel
        if hasattr(self, 'performance_tracker') and self.performance_tracker:
            try:
                # Tentar usar m√©tricas do performance_tracker
                total_trades = len(self.performance_tracker.trades)
                win_rate = 0
                total_return = 0
                
                if total_trades > 0:
                    wins = sum(1 for trade in self.performance_tracker.trades if trade.pnl > 0)
                    win_rate = (wins / total_trades) * 100
                    total_return = sum(trade.pnl for trade in self.performance_tracker.trades)
                
                return {
                    'total_trades': total_trades,
                    'win_rate': win_rate,
                    'total_return': total_return,
                    'sharpe_ratio': 0.0,  # N√£o implementado ainda
                    'max_drawdown_percent': 0.0,  # N√£o implementado ainda
                    # M√©tricas espec√≠ficas Enhanced
                    'signals_detected': self.signals_detected,
                    'signals_executed': self.signals_executed,
                    'execution_rate': (self.signals_executed / self.signals_detected * 100) if self.signals_detected > 0 else 0,
                    'algorithm_version': 'enhanced_v2.0'
                }
            except Exception as e:
                self.logger.error(f"Erro ao calcular m√©tricas do performance_tracker: {e}")
        
        # Fallback para m√©tricas b√°sicas Enhanced
        return {
            'total_trades': len(self.active_positions),
            'win_rate': 0.0,  # Sem dados hist√≥ricos ainda
            'total_return': 0.0,  # Sem dados hist√≥ricos ainda  
            'sharpe_ratio': 0.0,
            'max_drawdown_percent': 0.0,
            # M√©tricas espec√≠ficas Enhanced
            'signals_detected': self.signals_detected,
            'signals_executed': self.signals_executed,
            'execution_rate': (self.signals_executed / self.signals_detected * 100) if self.signals_detected > 0 else 0,
            'algorithm_version': 'enhanced_v2.0'
        }
    
    def log_performance_summary(self):
        """Log resumo de performance da estrat√©gia melhorada"""
        
        stats = self.get_enhanced_statistics()
        
        self.logger.info("üìä ENHANCED MULTI-ASSET PERFORMANCE:")
        self.logger.info(f"   üéØ Sinais detectados: {stats['signals_detected']}")
        self.logger.info(f"   ‚úÖ Sinais executados: {stats['signals_executed']}")
        self.logger.info(f"   üìà Taxa de execu√ß√£o: {stats['execution_rate']}")
        self.logger.info(f"   üîç Qualidade m√≠nima: {stats['min_signal_quality']}/100")
        self.logger.info(f"   üí™ Confian√ßa m√≠nima: {stats['min_confidence']}/100")
    
    def print_performance_summary(self):
        """Compatibilidade com grid_bot.py - imprimir resumo de performance"""
        
        # Usar performance_tracker se dispon√≠vel  
        if hasattr(self, 'performance_tracker') and self.performance_tracker:
            try:
                summary = self.performance_tracker.get_performance_summary(include_advanced=True)
                self.logger.info("üìä PERFORMANCE TRACKER:")
                self.logger.info(summary)
            except Exception as e:
                self.logger.error(f"Erro ao gerar resumo do performance_tracker: {e}")
        
        # Sempre mostrar m√©tricas Enhanced espec√≠ficas
        self.log_performance_summary()