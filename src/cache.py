# symbols_cache.py - NOVO ARQUIVO

import json
from pathlib import Path
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)

class SymbolsCache:
    """Gerenciador de cache de s√≠mbolos dispon√≠veis"""
    
    def __init__(self, cache_duration_hours: int = 24):
        self.cache_file = Path('data/symbols_cache.json')
        self.cache_file.parent.mkdir(exist_ok=True)
        self.cache_duration = timedelta(hours=cache_duration_hours)
    
    def get_symbols(self, api_client=None, force_refresh: bool = False) -> List[str]:
        """
        Retorna lista de s√≠mbolos dispon√≠veis da corretora Pacifica.fi
        
        PRIORIDADE:
        1. API Pacifica.fi (s√≠mbolos reais dispon√≠veis para trade)
        2. Cache v√°lido (< 24h) da √∫ltima consulta √† API
        3. Cache expirado (ainda √© melhor que lista padr√£o)
        4. Lista padr√£o (fallback final apenas se API nunca funcionou)
        
        Args:
            api_client: Cliente da API Pacifica (obrigat√≥rio para busca real)
            force_refresh: For√ßa nova consulta √† API ignorando cache
        
        Returns:
            Lista de s√≠mbolos dispon√≠veis para trade na Pacifica.fi
        """
        # 1. PRIORIDADE: Buscar da API (s√≠mbolos reais da corretora)
        if api_client:
            try:
                if force_refresh:
                    logger.info("üîÑ For√ßando atualiza√ß√£o da API Pacifica.fi")
                else:
                    logger.info("üîç Buscando s√≠mbolos da API Pacifica.fi")
                    
                symbols = self._fetch_from_api(api_client)
                self._save_to_cache(symbols)
                logger.info(f"‚úÖ {len(symbols)} s√≠mbolos obtidos da API e salvos no cache")
                return symbols
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao buscar da API: {e}")
                logger.info("üîÑ Tentando usar cache como fallback...")
        
        # 2. Cache v√°lido (dados da API salvos anteriormente)
        if not force_refresh and self._is_cache_valid():
            logger.info("üì¶ Usando s√≠mbolos do cache (dados da API)")
            return self._load_from_cache()
        
        # 3. Cache expirado (melhor que lista padr√£o)
        if self.cache_file.exists():
            logger.warning("‚ö†Ô∏è Usando cache expirado (√∫ltima consulta √† API)")
            return self._load_from_cache()
        
        # 4. FALLBACK FINAL: Lista padr√£o (apenas se API nunca funcionou)
        logger.warning("‚ö†Ô∏è API indispon√≠vel e sem cache - usando lista padr√£o")
        logger.warning("üí° Configure credenciais para usar s√≠mbolos reais da Pacifica.fi")
        return self._get_default_symbols()
    
    def _fetch_from_api(self, api_client) -> List[str]:
        """
        Busca s√≠mbolos dispon√≠veis para trade da API Pacifica.fi
        
        Usa o endpoint GET /api/v1/info que retorna todos os mercados ativos
        """
        try:
            logger.info("üì° Consultando API Pacifica.fi: GET /api/v1/info")
            
            # Busca informa√ß√µes de todos os mercados da Pacifica.fi
            markets_info = api_client.get_symbol_info()
            
            if not markets_info:
                raise Exception("API retornou resposta vazia")
            
            logger.info(f"üìä Resposta da API recebida: {type(markets_info)}")
            
            # Processar resposta da API
            symbols = []
            
            if isinstance(markets_info, list):
                # Formato: [{"symbol": "BTC", ...}, {"symbol": "ETH", ...}]
                logger.info(f"üìã Processando {len(markets_info)} mercados...")
                
                for market in markets_info:
                    if isinstance(market, dict):
                        symbol = market.get('symbol')
                        if symbol:
                            symbols.append(symbol.upper())  # Padronizar mai√∫scula
                            
            elif isinstance(markets_info, dict):
                # Formato aninhado: {"data": [...]} ou similar
                if 'data' in markets_info and isinstance(markets_info['data'], list):
                    logger.info(f"üìã Processando {len(markets_info['data'])} mercados (formato aninhado)...")
                    
                    for market in markets_info['data']:
                        if isinstance(market, dict):
                            symbol = market.get('symbol')
                            if symbol:
                                symbols.append(symbol.upper())
                else:
                    logger.error(f"‚ùå Formato de resposta n√£o reconhecido: {markets_info}")
                    raise Exception(f"Formato inesperado da API: {type(markets_info)}")
            
            if not symbols:
                logger.error("‚ùå Nenhum s√≠mbolo v√°lido encontrado na resposta da API")
                raise Exception("Nenhum s√≠mbolo encontrado na resposta da API")
            
            # Limpar, remover duplicatas e ordenar alfabeticamente
            unique_symbols = sorted(list(set(symbols)))
            
            logger.info(f"‚úÖ S√≠mbolos extra√≠dos da Pacifica.fi: {len(unique_symbols)}")
            logger.info(f"üìã Amostra: {unique_symbols[:10]}...")
            
            return unique_symbols
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar s√≠mbolos da API: {e}")
            raise
    
    def _is_cache_valid(self) -> bool:
        """Verifica se cache ainda √© v√°lido"""
        if not self.cache_file.exists():
            return False
        
        try:
            with open(self.cache_file, 'r') as f:
                data = json.load(f)
            
            cache_time = datetime.fromisoformat(data.get('updated_at'))
            is_valid = datetime.now() - cache_time < self.cache_duration
            
            if is_valid:
                logger.debug(f"‚úÖ Cache v√°lido (atualizado em {cache_time})")
            else:
                logger.debug(f"‚è∞ Cache expirado (atualizado em {cache_time})")
            
            return is_valid
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao validar cache: {e}")
            return False
    
    def _load_from_cache(self) -> List[str]:
        """Carrega s√≠mbolos do cache"""
        try:
            with open(self.cache_file, 'r') as f:
                data = json.load(f)
            return data.get('symbols', [])
        except Exception as e:
            logger.error(f"‚ùå Erro ao ler cache: {e}")
            return []
    
    def _save_to_cache(self, symbols: List[str]):
        """Salva s√≠mbolos no cache"""
        try:
            cache_data = {
                'updated_at': datetime.now().isoformat(),
                'symbols': symbols,
                'count': len(symbols)
            }
            
            with open(self.cache_file, 'w') as f:
                json.dump(cache_data, f, indent=2)
            
            logger.info(f"üíæ Cache salvo: {len(symbols)} s√≠mbolos")
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar cache: {e}")
    
    def _get_default_symbols(self) -> List[str]:
        """
        ‚ö†Ô∏è FALLBACK EMERGENCIAL: Lista manual de s√≠mbolos populares
        
        IMPORTANTE: Esta lista N√ÉO representa os s√≠mbolos dispon√≠veis na Pacifica.fi!
        √â apenas um fallback para quando:
        - API est√° indispon√≠vel
        - Credenciais n√£o configuradas  
        - Cache nunca foi criado
        
        Para ter os s√≠mbolos REAIS da corretora, configure as credenciais
        e o sistema buscar√° automaticamente da API.
        """
        symbols = [
            # ü•á Top Cryptocurrencies
            'BTC', 'ETH', 'BNB', 'XRP', 'SOL', 'ADA', 'AVAX', 'DOT', 'MATIC', 'LINK',
            'UNI', 'ATOM', 'LTC', 'BCH', 'XLM', 'ALGO', 'ICP', 'NEAR', 'FIL', 'MANA',
            'SAND', 'AXS', 'CRV', 'SUSHI', 'COMP', 'AAVE', 'MKR', 'SNX', '1INCH', 'YFI',
            
            # üí∞ Stablecoins
            'USDT', 'USDC', 'BUSD', 'DAI', 'FRAX', 'TUSD', 'USDP', 'LUSD', 'USDD', 'GUSD',
            
            # üêï Memecoins e Trending
            'DOGE', 'SHIB', 'PEPE', 'FLOKI', 'BONK', 'WIF', 'BRETT', 'POPCAT', 'DEGEN', 'MEME',
            'WOJAK', 'PEPE2', 'TURBO', 'LADYS', 'BABYDOGE', 'DOGELON',
            
            # üèóÔ∏è DeFi e Web3
            'CAKE', 'GMT', 'APE', 'BLUR', 'LDO', 'ARB', 'OP', 'IMX', 'GALA', 'ENJ',
            'ROSE', 'LOOKS', 'MAGIC', 'GMX', 'GRT', 'OCEAN', 'FET', 'AGIX', 'REN', 'CVX',
            
            # ‚õìÔ∏è Layer 1 & 2
            'FTM', 'ONE', 'HBAR', 'ETC', 'XTZ', 'ZIL', 'VET', 'THETA', 'EGLD', 'FLOW',
            'KLAY', 'CFX', 'CELO', 'HARMONY', 'AURORA', 'METIS', 'BOBA', 'MOONBEAM', 'MOONRIVER',
            
            # üéÆ Gaming & NFTs  
            'ALICE', 'TLM', 'MOBOX', 'SKILL', 'PYR', 'STARL', 'REVV', 'TOWER', 'NFTB', 'SUPER',
            
            # üíº Exchange Tokens
            'CRO', 'LEO', 'OKB', 'HT', 'KCS', 'GT', 'WBT', 'MX', 'NEXO', 'CEL',
            
            # üîÆ Outros Populares
            'TRX', 'EOS', 'XMR', 'ZEC', 'DASH', 'NEO', 'QTUM', 'WAVES', 'ZRX', 'BAT',
            'IOTA', 'XEM', 'LSK', 'SC', 'DCR', 'DGB', 'RVN', 'NANO', 'HOT', 'WIN'
        ]
        
        # Remover duplicatas e ordenar alfabeticamente
        return sorted(list(set(symbols)))
    
    def get_cache_info(self) -> Dict:
        """Retorna informa√ß√µes sobre o cache"""
        if not self.cache_file.exists():
            return {
                'exists': False,
                'message': 'Cache n√£o existe'
            }
        
        try:
            with open(self.cache_file, 'r') as f:
                data = json.load(f)
            
            updated_at = datetime.fromisoformat(data.get('updated_at'))
            age = datetime.now() - updated_at
            is_valid = age < self.cache_duration
            
            return {
                'exists': True,
                'valid': is_valid,
                'updated_at': data.get('updated_at'),
                'age_hours': age.total_seconds() / 3600,
                'count': data.get('count', 0),
                'symbols': data.get('symbols', [])
            }
        
        except Exception as e:
            return {
                'exists': True,
                'error': str(e)
            }
    
    def update_cache(self, api_client=None) -> Dict:
        """
        M√©todo espec√≠fico para atualizar cache de s√≠mbolos
        
        Usado pelo:
        - Bot na inicializa√ß√£o
        - Interface web no bot√£o "Atualizar S√≠mbolos"
        - Chamadas program√°ticas
        
        Returns:
            Dict com resultado da opera√ß√£o
        """
        try:
            if not api_client:
                logger.warning("‚ö†Ô∏è API client n√£o fornecido para atualiza√ß√£o")
                return {
                    'success': False,
                    'message': 'API client necess√°rio para buscar s√≠mbolos reais',
                    'symbols_count': 0,
                    'source': 'error'
                }
            
            # For√ßar busca da API
            symbols = self.get_symbols(api_client, force_refresh=True)
            
            # Determinar fonte dos dados
            if self.cache_file.exists():
                with open(self.cache_file, 'r') as f:
                    cache_data = json.load(f)
                    if len(symbols) == cache_data.get('count', 0):
                        source = 'api_cached'
                    else:
                        source = 'api_fresh'
            else:
                source = 'api_fresh'
            
            return {
                'success': True,
                'message': f'‚úÖ Cache atualizado: {len(symbols)} s√≠mbolos da Pacifica.fi',
                'symbols_count': len(symbols),
                'symbols': symbols,
                'source': source,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar cache: {e}")
            
            # Tentar usar cache existente como fallback
            if self.cache_file.exists():
                try:
                    symbols = self._load_from_cache()
                    return {
                        'success': False,
                        'message': f'‚ö†Ô∏è Erro na API, usando cache: {len(symbols)} s√≠mbolos',
                        'symbols_count': len(symbols),
                        'symbols': symbols,
                        'source': 'cache_fallback',
                        'error': str(e)
                    }
                except:
                    pass
            
            # Usar lista padr√£o como √∫ltimo recurso
            symbols = self._get_default_symbols()
            return {
                'success': False,
                'message': f'‚ùå API indispon√≠vel, usando lista padr√£o: {len(symbols)} s√≠mbolos',
                'symbols_count': len(symbols),
                'symbols': symbols,
                'source': 'default_fallback',
                'error': str(e)
            }