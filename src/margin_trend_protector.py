"""
Prote√ß√£o por Tend√™ncia de Margem - Universal
Detecta quedas s√∫bitas de margem e toma a√ß√µes preventivas
Aplica-se a TODAS as estrat√©gias (grid, multi-asset, etc.)
"""

import os
import time
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Callable
from dataclasses import dataclass
from pathlib import Path
import json
from src.risk_health_reporter import RiskHealthReporter  # ‚¨ÖÔ∏è ADD

@dataclass
class MarginSnapshot:
    """Snapshot de margem em um momento espec√≠fico"""
    timestamp: datetime
    margin_percent: float
    balance_usd: float
    
class MarginTrendProtector:
    """
    Protetor Universal de Tend√™ncia de Margem
    """
    
    def __init__(self, config: dict, external_logger=None):
        """Inicializar com configura√ß√µes do .env"""
        
        # Configura√ß√µes b√°sicas
        self.enabled = config.get('ENABLE_MARGIN_TREND_PROTECTION', 'false').lower() == 'true'
        self.drop_threshold = float(config.get('MARGIN_DROP_THRESHOLD_PERCENT', 15.0))
        self.history_minutes = int(config.get('MARGIN_HISTORY_MINUTES', 3))
        self.check_interval = int(config.get('MARGIN_TREND_CHECK_INTERVAL', 30))
        self.action = config.get('MARGIN_TREND_ACTION', 'cancel_orders')
        self.pause_minutes = int(config.get('MARGIN_TREND_PAUSE_MINUTES', 30))
        self.log_enabled = config.get('MARGIN_TREND_LOG_ENABLED', 'true').lower() == 'true'
        
        # Hist√≥rico de margem
        self.margin_history: List[MarginSnapshot] = []
        
        # Controle de estado
        self.is_paused = False
        self.pause_until: Optional[datetime] = None
        self.last_check = datetime.now()
        
        # Callbacks para a√ß√µes (ser√£o definidos externamente)
        self.callbacks = {
            'cancel_orders': None,
            'reduce_positions': None,
            'pause_bot': None,
            'shutdown_bot': None,
            'get_current_margin': None
        }
        
        # Setup logging - usar logger externo se fornecido
        if external_logger:
            self.logger = external_logger
        else:
            self.logger = logging.getLogger('MarginTrendProtector')
            if self.log_enabled:
                self.logger.setLevel(logging.INFO)
        
        # Arquivo de hist√≥rico
        self.history_file = Path("data/margin_trend_history.json")
        self.history_file.parent.mkdir(exist_ok=True)
        
        if self.enabled:
            self.logger.info(f"‚úÖ Prote√ß√£o de Margem ATIVADA - Threshold: {self.drop_threshold}%")
            self.logger.info(f"üìä Hist√≥rico: {self.history_minutes}min | A√ß√£o: {self.action} | Intervalo: {self.check_interval}s")
        else:
            self.logger.info("‚è∏Ô∏è Prote√ß√£o de Margem DESATIVADA")
        
        # Contador para logs peri√≥dicos
        self.status_log_counter = 0
        self.health = RiskHealthReporter(strategy_name="margin_trend")  # ‚¨ÖÔ∏è ADD
    
    def register_callback(self, action: str, callback: Callable):
        """Registrar callbacks para a√ß√µes espec√≠ficas"""
        self.callbacks[action] = callback
        self.logger.debug(f"Callback registrado: {action}")
    
    def add_margin_snapshot(self, margin_percent: float, balance_usd: float = 0):
        """Adicionar snapshot de margem ao hist√≥rico"""
        if not self.enabled:
            return
        
        snapshot = MarginSnapshot(
            timestamp=datetime.now(),
            margin_percent=margin_percent,
            balance_usd=balance_usd
        )
        
        self.margin_history.append(snapshot)
        
        # Limpar hist√≥rico antigo (manter apenas o per√≠odo necess√°rio)
        cutoff_time = datetime.now() - timedelta(minutes=self.history_minutes)
        self.margin_history = [
            s for s in self.margin_history 
            if s.timestamp > cutoff_time
        ]
        
        if self.log_enabled:
            # Log detalhado a cada 10 snapshots (para n√£o spammar)
            if len(self.margin_history) % 10 == 0 or len(self.margin_history) <= 3:
                self.logger.info(f"üìä Margem: {margin_percent:.1f}% | Hist√≥rico: {len(self.margin_history)} pontos | Per√≠odo: {self.history_minutes}min")
            else:
                self.logger.debug(f"Margem: {margin_percent:.2f}% - Hist√≥rico: {len(self.margin_history)} pontos")
        # Telemetria leve de margem
        self.health.update_status({
            "margin_percent": margin_percent,
            "balance_usd": balance_usd,
            "history_points": len(self.margin_history)
        })
    
    def check_margin_trend(self) -> Dict:
        """
        Verificar tend√™ncia de margem e tomar a√ß√£o se necess√°rio
        Retorna resultado da verifica√ß√£o
        """
        if not self.enabled:
            return {"status": "disabled"}
        
        # Verificar se ainda est√° pausado
        if self.is_paused and self.pause_until:
            if datetime.now() < self.pause_until:
                return {"status": "paused", "pause_until": self.pause_until}
            else:
                self.is_paused = False
                self.pause_until = None
                self.logger.info("‚úÖ Prote√ß√£o de margem reativada ap√≥s pausa")
        
        # Verificar se √© hora de checar
        if (datetime.now() - self.last_check).seconds < self.check_interval:
            return {"status": "waiting"}
        
        self.last_check = datetime.now()
        
        # Precisamos de pelo menos 2 pontos para comparar
        if len(self.margin_history) < 2:
            return {"status": "insufficient_data", "points": len(self.margin_history)}
        
        # Obter margem atual e hist√≥rica
        current_snapshot = self.margin_history[-1]
        oldest_snapshot = self.margin_history[0]
        
        # Calcular queda percentual
        margin_drop = oldest_snapshot.margin_percent - current_snapshot.margin_percent
        drop_percent = (margin_drop / oldest_snapshot.margin_percent) * 100
        
        # Log da verifica√ß√£o
        if self.log_enabled:
            time_diff = (current_snapshot.timestamp - oldest_snapshot.timestamp).seconds / 60
            
            # Log normal a cada 20 verifica√ß√µes ou quando h√° mudan√ßa significativa
            self.status_log_counter += 1
            should_log = (self.status_log_counter % 20 == 0) or (abs(drop_percent) > self.drop_threshold * 0.5)
            
            if should_log:
                trend_icon = "üìà" if drop_percent < 0 else "üìâ" if drop_percent > 5 else "‚û°Ô∏è"
                self.logger.info(
                    f"üîç {trend_icon} Verifica√ß√£o: Margem {oldest_snapshot.margin_percent:.1f}% ‚Üí "
                    f"{current_snapshot.margin_percent:.1f}% em {time_diff:.1f}min "
                    f"(varia√ß√£o: {drop_percent:+.1f}% | limite: {self.drop_threshold}%)"
                )
        
        # Telemetria da checagem
        self.health.log_check("margin_check", {
            "current_margin": current_snapshot.margin_percent,
            "drop_percent": round(drop_percent,2),
            "threshold": self.drop_threshold,
            "window_min": self.history_minutes
        })
        # Verificar se excedeu threshold
        if drop_percent >= self.drop_threshold:
            return self._trigger_protection(drop_percent, current_snapshot, oldest_snapshot)
        
        return {
            "status": "normal",
            "drop_percent": round(drop_percent, 2),
            "threshold": self.drop_threshold,
            "current_margin": current_snapshot.margin_percent
        }
    
    def _trigger_protection(self, drop_percent: float, current: MarginSnapshot, oldest: MarginSnapshot) -> Dict:
        """Acionar prote√ß√£o de margem"""
        
        time_diff = (current.timestamp - oldest.timestamp).seconds / 60
        
        self.logger.critical("=" * 80)
        self.logger.critical("üö® PROTE√á√ÉO DE MARGEM ACIONADA!")
        self.health.log_check("margin_protection_triggered", {
            "drop_percent": round(drop_percent,2),
            "action": self.action,
            "window_min": self.history_minutes
        })
        self.logger.critical(f"üìä Margem caiu {drop_percent:.1f}% em {time_diff:.1f} minutos")
        self.logger.critical(f"üìà Margem anterior: {oldest.margin_percent:.1f}%")
        self.logger.critical(f"üìâ Margem atual: {current.margin_percent:.1f}%")
        self.logger.critical(f"‚ö†Ô∏è Limite configurado: {self.drop_threshold}%")
        self.logger.critical(f"üîß A√ß√£o a ser executada: {self.action.upper()}")
        self.logger.critical("=" * 80)
        
        # Salvar evento no hist√≥rico
        self._save_protection_event(drop_percent, current, oldest)
        
        # Executar a√ß√£o configurada
        action_result = self._execute_action()
        
        return {
            "status": "protection_triggered",
            "drop_percent": round(drop_percent, 2),
            "action": self.action,
            "action_result": action_result,
            "current_margin": current.margin_percent,
            "previous_margin": oldest.margin_percent
        }
    
    def _execute_action(self) -> Dict:
        """Executar a√ß√£o de prote√ß√£o"""
        
        try:
            if self.action == 'pause':
                return self._pause_protection()
            
            elif self.action == 'cancel_orders':
                if self.callbacks['cancel_orders']:
                    result = self.callbacks['cancel_orders']()
                    self.logger.info("üìã Ordens canceladas por prote√ß√£o de margem")
                    return {"success": True, "message": "Ordens canceladas", "details": result}
                else:
                    self.logger.error("‚ùå Callback cancel_orders n√£o registrado")
                    return {"success": False, "error": "Callback n√£o dispon√≠vel"}
            
            elif self.action == 'reduce_positions':
                if self.callbacks['reduce_positions']:
                    result = self.callbacks['reduce_positions']()
                    self.logger.info("üìâ Posi√ß√µes reduzidas por prote√ß√£o de margem")
                    return {"success": True, "message": "Posi√ß√µes reduzidas", "details": result}
                else:
                    self.logger.error("‚ùå Callback reduce_positions n√£o registrado")
                    return {"success": False, "error": "Callback n√£o dispon√≠vel"}
            
            elif self.action == 'shutdown':
                if self.callbacks['shutdown_bot']:
                    result = self.callbacks['shutdown_bot']()
                    self.logger.critical("üõë Bot desligado por prote√ß√£o de margem")
                    return {"success": True, "message": "Bot desligado", "details": result}
                else:
                    self.logger.error("‚ùå Callback shutdown_bot n√£o registrado")
                    return {"success": False, "error": "Callback n√£o dispon√≠vel"}
            
            else:
                self.logger.error(f"‚ùå A√ß√£o desconhecida: {self.action}")
                return {"success": False, "error": f"A√ß√£o '{self.action}' n√£o implementada"}
        
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao executar a√ß√£o {self.action}: {e}")
            return {"success": False, "error": str(e)}
    
    def _pause_protection(self) -> Dict:
        """Pausar prote√ß√£o por tempo determinado"""
        self.is_paused = True
        self.pause_until = datetime.now() + timedelta(minutes=self.pause_minutes)
        
        self.logger.warning(f"‚è∏Ô∏è Prote√ß√£o pausada por {self.pause_minutes} minutos at√© {self.pause_until}")
        
        return {
            "success": True,
            "message": f"Prote√ß√£o pausada por {self.pause_minutes} minutos",
            "pause_until": self.pause_until.isoformat()
        }
    
    def _save_protection_event(self, drop_percent: float, current: MarginSnapshot, oldest: MarginSnapshot):
        """Salvar evento de prote√ß√£o no hist√≥rico"""
        try:
            event = {
                "timestamp": datetime.now().isoformat(),
                "drop_percent": round(drop_percent, 2),
                "current_margin": current.margin_percent,
                "previous_margin": oldest.margin_percent,
                "action": self.action,
                "threshold": self.drop_threshold,
                "time_window_minutes": self.history_minutes
            }
            
            # Ler hist√≥rico existente
            history = []
            if self.history_file.exists():
                try:
                    history = json.loads(self.history_file.read_text())
                except:
                    history = []
            
            # Adicionar novo evento
            history.append(event)
            
            # Manter apenas √∫ltimos 100 eventos
            if len(history) > 100:
                history = history[-100:]
            
            # Salvar
            self.history_file.write_text(json.dumps(history, indent=2))
            
        except Exception as e:
            self.logger.error(f"Erro ao salvar evento: {e}")
    
    def get_status(self) -> Dict:
        """Obter status atual da prote√ß√£o"""
        return {
            "enabled": self.enabled,
            "is_paused": self.is_paused,
            "pause_until": self.pause_until.isoformat() if self.pause_until else None,
            "drop_threshold": self.drop_threshold,
            "history_minutes": self.history_minutes,
            "action": self.action,
            "history_points": len(self.margin_history),
            "last_check": self.last_check.isoformat()
        }
    
    def manual_trigger(self, reason: str = "Manual") -> Dict:
        """Acionar prote√ß√£o manualmente para testes"""
        self.logger.warning(f"üîß Prote√ß√£o acionada manualmente: {reason}")
        return self._execute_action()

# ========== FUN√á√ÉO DE INTEGRA√á√ÉO ==========

def create_margin_protector(config: dict) -> MarginTrendProtector:
    """
    Factory function para criar protetor de margem
    """
    return MarginTrendProtector(config)

# ========== EXEMPLO DE USO ==========

if __name__ == "__main__":
    # Teste r√°pido
    config = {
        'ENABLE_MARGIN_TREND_PROTECTION': 'true',
        'MARGIN_DROP_THRESHOLD_PERCENT': '10.0',
        'MARGIN_HISTORY_MINUTES': '2',
        'MARGIN_TREND_ACTION': 'pause'
    }
    
    protector = create_margin_protector(config)
    
    # Simular quedas de margem
    protector.add_margin_snapshot(50.0)
    time.sleep(1)
    protector.add_margin_snapshot(45.0)
    time.sleep(1)
    protector.add_margin_snapshot(40.0)  # Queda de 20%
    
    result = protector.check_margin_trend()
    print(f"Resultado: {result}")

# ========== CLASSE ADAPTADORA PARA GRID BOT ==========

class MarginTrendAdapter:
    """
    Adaptador que integra o MarginTrendProtector com qualquer bot
    sem poluir o c√≥digo principal
    """
    
    def __init__(self, bot_instance, config: dict):
        """
        Inicializar adaptador
        
        Args:
            bot_instance: Inst√¢ncia do bot (GridTradingBot, etc.)
            config: Configura√ß√µes do ambiente
        """
        self.bot = bot_instance
        # Usar o logger do bot principal para garantir que apare√ßa nos logs
        if hasattr(bot_instance, 'logger') and bot_instance.logger:
            self.logger = bot_instance.logger
        else:
            self.logger = logging.getLogger('MarginTrendAdapter')
        
        # Criar protetor de margem com logger compartilhado
        self.protector = MarginTrendProtector(config, external_logger=self.logger)
        
        # Auto-registrar callbacks
        self._register_callbacks()
        
        # Log status da prote√ß√£o
        if self.protector.enabled:
            self.logger.info("‚úÖ Adaptador de prote√ß√£o de margem inicializado")
            self.logger.info(f"üîß Configura√ß√£o: {self.protector.drop_threshold}% em {self.protector.history_minutes}min ‚Üí {self.protector.action}")
        else:
            self.logger.info("‚è∏Ô∏è Adaptador inicializado (prote√ß√£o DESABILITADA)")
        
        # Contador para logs peri√≥dicos
        self.monitor_counter = 0
    
    def _register_callbacks(self):
        """Registrar callbacks automaticamente"""
        self.protector.register_callback('cancel_orders', self._cancel_all_orders)
        self.protector.register_callback('reduce_positions', self._reduce_positions)
        self.protector.register_callback('shutdown_bot', self._shutdown_bot)
        self.protector.register_callback('get_current_margin', self._get_margin_percent)
    
    def _cancel_all_orders(self):
        """Cancelar todas as ordens ativas"""
        try:
            if hasattr(self.bot, 'strategy') and self.bot.strategy and hasattr(self.bot.strategy, 'cancel_all_orders'):
                self.logger.warning("üö´ Cancelando todas as ordens via estrat√©gia")
                result = self.bot.strategy.cancel_all_orders()
                return {"success": True, "message": "Ordens canceladas pela estrat√©gia", "details": result}
            elif hasattr(self.bot, 'auth') and self.bot.auth:
                self.logger.warning("üö´ Cancelando todas as ordens via API")
                symbol = getattr(self.bot, 'symbol', 'BTC')
                result = self.bot.auth.cancel_all_orders(symbol)
                return {"success": True, "message": "Ordens canceladas via API", "details": result}
            else:
                self.logger.error("‚ùå Nenhum m√©todo dispon√≠vel para cancelar ordens")
                return {"success": False, "error": "Nenhum m√©todo dispon√≠vel"}
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao cancelar ordens: {e}")
            return {"success": False, "error": str(e)}
    
    def _reduce_positions(self):
        """Reduzir posi√ß√µes ativas"""
        try:
            if hasattr(self.bot, 'position_mgr') and self.bot.position_mgr:
                self.logger.warning("üìâ Reduzindo posi√ß√µes por prote√ß√£o de margem")
                # Usar o m√©todo interno de redu√ß√£o de posi√ß√£o em margem baixa
                if hasattr(self.bot.position_mgr, '_reduce_position_on_low_margin'):
                    result = self.bot.position_mgr._reduce_position_on_low_margin()
                    return {"success": True, "message": "Posi√ß√µes reduzidas", "freed_margin": result}
                else:
                    self.logger.error("‚ùå M√©todo de redu√ß√£o de posi√ß√£o n√£o dispon√≠vel")
                    return {"success": False, "error": "M√©todo n√£o dispon√≠vel"}
            else:
                self.logger.error("‚ùå Position manager n√£o dispon√≠vel")
                return {"success": False, "error": "Position manager n√£o dispon√≠vel"}
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao reduzir posi√ß√µes: {e}")
            return {"success": False, "error": str(e)}
    
    def _shutdown_bot(self):
        """Desligar bot"""
        try:
            if hasattr(self.bot, 'shutdown'):
                self.logger.critical("üõë Desligando bot por prote√ß√£o de margem")
                result = self.bot.shutdown()
                return {"success": True, "message": "Bot desligado", "details": result}
            elif hasattr(self.bot, 'stop'):
                self.logger.critical("üõë Parando bot por prote√ß√£o de margem")
                self.bot.stop()
                return {"success": True, "message": "Bot parado"}
            else:
                self.logger.error("‚ùå M√©todo de shutdown n√£o dispon√≠vel")
                return {"success": False, "error": "M√©todo n√£o dispon√≠vel"}
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao desligar bot: {e}")
            return {"success": False, "error": str(e)}
    
    def _get_margin_percent(self):
        """Obter percentual de margem atual"""
        try:
            if hasattr(self.bot, 'position_mgr') and self.bot.position_mgr:
                # Calcular margem livre como percentual
                total_balance = self.bot.position_mgr.margin_used + self.bot.position_mgr.margin_available
                if total_balance > 0:
                    margin_percent = (self.bot.position_mgr.margin_available / total_balance) * 100
                    return margin_percent
                else:
                    return 100.0  # Se n√£o h√° posi√ß√µes, margem est√° 100% livre
            else:
                self.logger.warning("‚ö†Ô∏è Position manager n√£o dispon√≠vel para calcular margem")
                return 50.0  # Valor padr√£o conservador
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao calcular margem: {e}")
            return 50.0  # Valor padr√£o em caso de erro
    
    def _get_balance(self):
        """Obter saldo atual para hist√≥rico"""
        try:
            if hasattr(self.bot, 'position_mgr') and self.bot.position_mgr:
                return self.bot.position_mgr.margin_used + self.bot.position_mgr.margin_available
            else:
                return 0.0
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter saldo: {e}")
            return 0.0
    
    def monitor_and_protect(self):
        """
        M√©todo principal para monitorar e proteger
        Deve ser chamado no loop do bot
        """
        try:
            self.monitor_counter += 1
            
            # Obter dados atuais
            current_margin = self._get_margin_percent()
            current_balance = self._get_balance()
            
            # Log de status peri√≥dico (a cada 50 chamadas = ~50 minutos se chamado a cada minuto)
            if self.monitor_counter % 50 == 1:
                self.logger.info(f"üí° Monitor de Margem - Status: Margem {current_margin:.1f}% | Saldo ${current_balance:,.2f}")
            
            # Adicionar snapshot ao hist√≥rico
            self.protector.add_margin_snapshot(current_margin, current_balance)
            
            # Verificar prote√ß√£o
            result = self.protector.check_margin_trend()
            
            # Log eventos importantes
            status = result.get("status")
            if status == "protection_triggered":
                self.logger.critical(f"üö® ADAPTADOR: Prote√ß√£o acionada! Resultado: {result}")
                return result
            elif status == "paused":
                # Log apenas a cada 10 chamadas quando pausado
                if self.monitor_counter % 10 == 0:
                    self.logger.warning("‚è∏Ô∏è Prote√ß√£o pausada - aguardando retomada...")
                return result
            elif status == "normal":
                # Log ocasional do status normal
                if self.monitor_counter % 100 == 0:  # A cada ~100 chamadas
                    drop = result.get("drop_percent", 0)
                    threshold = result.get("threshold", 0)
                    self.logger.info(f"‚úÖ Status normal - Varia√ß√£o: {drop:+.1f}% (limite: {threshold}%)")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no monitoramento de margem: {e}")
            return {"status": "error", "error": str(e)}
    
    def get_status(self):
        """Obter status da prote√ß√£o"""
        return self.protector.get_status()
    
    def log_detailed_status(self):
        """Log status detalhado da prote√ß√£o (para debug)"""
        try:
            status = self.get_status()
            current_margin = self._get_margin_percent()
            current_balance = self._get_balance()
            
            self.logger.info("=" * 50)
            self.logger.info("üìä STATUS DETALHADO DA PROTE√á√ÉO DE MARGEM")
            self.logger.info(f"üîß Habilitada: {'SIM' if status['enabled'] else 'N√ÉO'}")
            self.logger.info(f"‚è∏Ô∏è Pausada: {'SIM' if status['is_paused'] else 'N√ÉO'}")
            self.logger.info(f"üìà Margem Atual: {current_margin:.1f}%")
            self.logger.info(f"üí∞ Saldo Atual: ${current_balance:,.2f}")
            self.logger.info(f"‚ö†Ô∏è Limite de Queda: {status['drop_threshold']}%")
            self.logger.info(f"‚è±Ô∏è Per√≠odo de An√°lise: {status['history_minutes']} minutos")
            self.logger.info(f"üîß A√ß√£o Configurada: {status['action']}")
            self.logger.info(f"üìã Pontos no Hist√≥rico: {status['history_points']}")
            self.logger.info(f"üïí √öltima Verifica√ß√£o: {status['last_check']}")
            if status['is_paused'] and status['pause_until']:
                self.logger.info(f"‚è∞ Pausa at√©: {status['pause_until']}")
            self.logger.info("=" * 50)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter status detalhado: {e}")
    
    def manual_trigger(self, reason: str = "Manual"):
        """Acionar prote√ß√£o manualmente"""
        return self.protector.manual_trigger(reason)

# ========== FUN√á√ÉO FACTORY SIMPLIFICADA ==========

def create_margin_trend_adapter(bot_instance, config: dict) -> MarginTrendAdapter:
    """
    Factory function para criar adaptador de prote√ß√£o de margem
    
    Args:
        bot_instance: Inst√¢ncia do bot
        config: Configura√ß√µes do ambiente
    
    Returns:
        MarginTrendAdapter configurado e pronto para uso
    """
    return MarginTrendAdapter(bot_instance, config)